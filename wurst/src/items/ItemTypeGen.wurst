package ItemTypeGen
import initlater ObjEditingNatives
import initlater ItemObjEditing
import initlater StatHandler
import initlater EquipmentClassification
import ItemTypeList
import ItemTooltipGen
import ItemTypeData

let XX = Stat.LIFE // placeholder for unused statarguments

public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, XX, 0, XX, 0, XX, 0, XX, 0, XX, 0, XX, 0, XX, 0, name, descr, icon)
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, s2, v2, XX, 0, XX, 0, XX, 0, XX, 0, XX, 0, XX, 0, name, descr, icon)
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, Stat s3, int v3, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, s2, v2, s3, v3, XX, 0, XX, 0, XX, 0, XX, 0, XX, 0, name, descr, icon)
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, Stat s3, int v3, Stat s4, int v4, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, s2, v2, s3, v3, s4, v4, XX, 0, XX, 0, XX, 0, XX, 0, name, descr, icon)
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, Stat s3, int v3, Stat s4, int v4, Stat s5, int v5, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, s2, v2, s3, v3, s4, v4, s5, v5, XX, 0, XX, 0, XX, 0, name, descr, icon)
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, Stat s3, int v3, Stat s4, int v4, Stat s5, int v5, Stat s6, int v6, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, s2, v2, s3, v3, s4, v4, s5, v5, s6, v6, XX, 0, XX, 0, name, descr, icon)
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, Stat s3, int v3, Stat s4, int v4, Stat s5, int v5, Stat s6, int v6, Stat s7, int v7, string name, string descr, string icon)
	genEq(raw, qual, slot, cls, cost, s1, v1, s2, v2, s3, v3, s4, v4, s5, v5, s6, v6, s7, v7, XX, 0, name, descr, icon)
	
public function genEq(int raw, EqQua qual, EqSlo slot, EqCla cls, int cost, Stat s1, int v1, Stat s2, int v2, Stat s3, int v3, Stat s4, int v4, Stat s5, int v5, Stat s6, int v6, Stat s7, int v7, Stat s8, int v8, string name, string descr, string icon)
	let itd = new ItemTypeData(raw)
	itd.itemClass = ItemClass.EQUIPMENT
	itd.name = name
	itd.equipmentSlot = slot
	itd.equipmentClass = cls
	let sl = new StatList()
	if v1 != 0
		sl.add(s1, v1)
	if v2 != 0
		sl.add(s2, v2)
	if v3 != 0
		sl.add(s3, v3)
	if v4 != 0
		sl.add(s4, v4)
	if v5 != 0
		sl.add(s5, v5)
	if v6 != 0
		sl.add(s6, v6)
	if v7 != 0
		sl.add(s7, v7)
	if v8 != 0
		sl.add(s8, v8)
	itd.stats = sl
	if compiletime
		tooltipReset()
		tooltipAddEquipmentProperties(slot, cls)
		tooltipAddDescription(descr)
		tooltipAddStatList(sl)
		let tt = tooltipGet()
		new ItemDefinition(raw, 'ches')
			..setName(tooltipColorizeItemName(name, qual))
			..setTooltipBasic(name)
			..setInterfaceIcon(icon)
			..setDescription(tt)
			..setTooltipExtended(tt)
			..setGoldCost(cost)
			..setStockReplenishInterval(0)
			..setClassification("Campaign")
			..setHitPoints(999999)
			..setCanBeSoldToMerchants(true)


public function genMa(int raw, int cost, string name, string description, string icon)
	let itd = new ItemTypeData(raw)
	itd.itemClass = ItemClass.MATERIAL
	itd.name = name
	if compiletime
		tooltipReset()
		tooltipAddMaterialProperties()
		tooltipAddDescription(description)
		let tt = tooltipGet()
		new ItemDefinition(raw, 'ches')
			..setName(name)
			..setTooltipBasic(name)
			..setInterfaceIcon(icon)
			..setDescription(tt)
			..setTooltipExtended(tt)
			..setGoldCost(cost)
			..setStockReplenishInterval(0)
			..setClassification("Purchasable")
			..setHitPoints(999999)
			..setCanBeSoldToMerchants(true)
	
public function genRe(int raw, int targetRaw, int cost, int raw1, string description)	
	genRe(raw, targetRaw, cost, raw1, 0, 0, 0, 0, 0, 0, 0, description)
public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, string description)	
	genRe(raw, targetRaw, cost, raw1, raw2, 0, 0, 0, 0, 0, 0, description)
public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, int raw3, string description)	
	genRe(raw, targetRaw, cost, raw1, raw2, raw3, 0, 0, 0, 0, 0, description)
public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, int raw3, int raw4, string description)	
	genRe(raw, targetRaw, cost, raw1, raw2, raw3, raw4, 0, 0, 0, 0, description)
public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, int raw3, int raw4, int raw5, string description)	
	genRe(raw, targetRaw, cost, raw1, raw2, raw3, raw4, raw5, 0, 0, 0, description)
public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, int raw3, int raw4, int raw5, int raw6, string description)	
	genRe(raw, targetRaw, cost, raw1, raw2, raw3, raw4, raw5, raw6, 0, 0, description)
public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, int raw3, int raw4, int raw5, int raw6, int raw7, string description)	
	genRe(raw, targetRaw, cost, raw1, raw2, raw3, raw4, raw5, raw6, raw7, 0, description)

public function genRe(int raw, int targetRaw, int cost, int raw1, int raw2, int raw3, int raw4, int raw5, int raw6, int raw7, int raw8, string description)
	let itd = new ItemTypeData(raw)
	itd.itemClass = ItemClass.RECIPE
	let targetName = targetRaw.xGetItemTypeData().name
	itd.name = "Recipe: " + targetName
	itd.recipeTarget = targetRaw
	itd.recipeReq1 = raw1
	itd.recipeReq2 = raw2
	itd.recipeReq3 = raw3
	itd.recipeReq4 = raw4
	itd.recipeReq5 = raw5
	itd.recipeReq6 = raw6
	itd.recipeReq7 = raw7
	itd.recipeReq8 = raw8
	if compiletime
		tooltipReset()
		tooltipAddRecipeProperties()
		tooltipAddDescription(description)
		tooltipAddRecipeReq(itd)
		let tt = tooltipGet()
		new ItemDefinition(raw, 'ches')
			..setName("Recipe: " + targetName)
			..setTooltipBasic("Recipe: " + targetName)
			..setInterfaceIcon("ReplaceableTextures\\CommandButtons\\BTNSnazzyScroll.blp")
			..setDescription(tt)
			..setTooltipExtended(tt)
			..setGoldCost(cost)
			..setStockReplenishInterval(0)
			..setClassification("Charged")
			..setAbilities("AD01")
			..setHitPoints(999999)
			..setActivelyUsed(true)
			..setCanBeSoldToMerchants(true)

@compiletime function genUsableDummyAbility()
	let u = createObjectDefinition("w3a", 'AD01', 'AIim')
	u.setLvlDataString("anam", 0, 0, "dummy_usableItem")
	u.setLvlDataString("atat", 0, 0, "")
	u.setLvlDataInt("Iint", 1, 2, 0)
	u.setLvlDataString("aart", 0, 0, "ReplaceableTextures\\CommandButtons\\BTNPenguin.blp")
	

@compiletime function genObjects()
	initItemTypeLists()
			
init
	initItemTypeLists()