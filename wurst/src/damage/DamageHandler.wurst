package DamageHandler
import public initlater DamageTypeList
import initlater UnitData
import initlater StatHandler
import initlater CombatText
import initlater ThreatHandler
import initlater BuffHandler
import initlater SpellIgnoreThePain
import initlater TalentList

trigger unitAttackTrigger
boolean blockDmgEvent = false
unit currentKillingUnit = null

public function xGetKillingUnit() returns unit
	return currentKillingUnit

public function blockDamageEvents(boolean flag)
	blockDmgEvent = flag

// Wrapper for non-attack damage.
public function unitDamageTarget(unit source, unit target, real damage, DamageType damageType)
	unitDamageTarget(source, target, damage, damageType, false)

public function unitDamageTarget(unit source, unit target, real damage, DamageType damageType, boolean isAttack)
	// Proccs, buffs, etc.:
	if target.hasBuff(BuffIgnoreThePain.typeId)
		if isAttack and target.xHasTalent(TALENT_WARRIOR_IGNORE_REFLECT) and source.getPos().distToVecSquared(target.getPos()) <= 100*100
			unitDamageTarget(target, source, target.getStat(Stat.DAMAGE) * 1., DamageType.PHYSICAL) // Reflected damage
		return
	// 
	boolean isCrit = false
	var dmg = damage
	// if damage comes from autoattack
	if isAttack
		// Calc evasion
		if GetRandomInt(0, 99) < target.getStat(Stat.EVA) // if evade ...
			combatTextEvade(source, target)
			return
		// Calc crit
		if GetRandomInt(0, 99) < source.getStat(Stat.CC) // if crit ...
			isCrit = true
			dmg = dmg * (1 + source.getStat(Stat.CM)*0.01) + source.getStat(Stat.CB) // damage = damage * critmultiplier + critbonus
	// Calc damage modifieds from armor/resists
	switch damageType
		case PHYSICAL
			dmg -= target.getStat(Stat.ARMOR)
		case MAGIC
			// TODO: magic resist
		case FIRE
			// TODO: fire resist
		case POISON
			// TODO: poison resist
	// Apply damage
	if dmg > 0
		target.setHP(target.getHP() - dmg)
		// Apply Threat
		if not target.xIsHero() // If target is creep/boss
			real threat = dmg
			threat *= (1+source.getStat(Stat.ATTACKTHREAT)*0.01)
			modifyThreat(source, target, threat, true)
		if target.getHP() < 0.405
			currentKillingUnit = source
			unitDeath(target) // unit dies
	// Floating text
	if isCrit
		combatTextCrit(source, target, dmg)
	else
		combatTextDamage(source, target, dmg)


// TODO: give every instance its own trigger
public class UnitDamageHandler
	
	construct(unit u)
		unitAttackTrigger.registerUnitEvent(u, EVENT_UNIT_DAMAGED)
		
	ondestroy
		// TODO: recycle event / trigger

function unitAttacked()
	if not blockDmgEvent
		unit source = GetEventDamageSource()
//		print("EVENT_UNIT_DAMAGED triggered. Source: " + source.getName() + ", TriggeringUnit: " + GetTriggerUnit().getName())
		if source.getTypeId() != DUMMY_UNIT_ID
			real damage = 1.*source.xGetUnitData().unitStatBuffer.get(Stat.DAMAGE)
			unitDamageTarget(source, GetTriggerUnit(), damage, DamageType.PHYSICAL, true)

init
	unitAttackTrigger = CreateTrigger()
	..addAction(function unitAttacked)